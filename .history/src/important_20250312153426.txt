import { setCart, addToCart, removeFromCart, clearCart } from "./cartSlice";

const API_URL = "http://localhost:3001/cart";

// *Add to Cart Before Login (Saves in LocalStorage)*
export const addToCartBeforeLogin = (product) => (dispatch, getState) => {
    dispatch(addToCart(product));
    localStorage.setItem("cart", JSON.stringify(getState().cart.items));
};

// *Load Cart After Login (Merge Local with Server)*
export const loadCartAfterLogin = () => async (dispatch) => {
    const token = localStorage.getItem("token");
    let localCart = JSON.parse(localStorage.getItem("cart")) || [];

    try {
        // Fetch user cart from the server
        const response = await fetch(API_URL, {
            method: "GET",
            headers: { "Authorization": `Bearer ${token}` },
        });

        let userCart = response.ok ? await response.json() : { cart: [] };

        // Merge Local Cart & Server Cart (Remove Duplicates)
        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];

        dispatch(setCart(mergedCart));

        // Save merged cart to the server
        await fetch(`${API_URL}/merge`, {
            method: "POST",
            headers: { 
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify({ localCart }),
        });

        // Clear local cart after merging
        localStorage.removeItem("cart");
    } catch (error) {
        console.error("Error fetching cart:", error);
    }
};

// *Add to Cart After Login*
export const addToCartAPI = (product) => async (dispatch) => {
    const token = localStorage.getItem("token");

    dispatch(addToCart(product));

    try {
        await fetch(API_URL, {
            method: "POST",
            headers: { 
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify({ product }),
        });
    } catch (error) {
        console.error("Error adding product to cart:", error);
    }
};

// *Remove Item from Cart*
export const removeFromCartAPI = (productId) => async (dispatch, getState) => {
    const token = localStorage.getItem("token");

    dispatch(removeFromCart(productId));

    try {
        await fetch(`${API_URL}/${productId}`, {
            method: "DELETE",
            headers: { "Authorization": `Bearer ${token}` },
        });
    } catch (error) {
        console.error("Error removing product from cart:", error);
    }
};

// *Clear Cart (Logout)*
export const clearCartOnLogout = () => async (dispatch) => {
    const token = localStorage.getItem("token");

    dispatch(clearCart());

    try {
        await fetch(API_URL, {
            method: "DELETE",
            headers: { "Authorization": `Bearer ${token}` },
        });
    } catch (error) {
        console.error("Error clearing cart:", error);
    }
};







const express = require("express");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const fs = require("fs");
const bodyParser = require("body-parser");
require("dotenv").config();

const app = express();
const PORT = 3001;
const CART_DB = "./cart.json";
const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";

app.use(cors());
app.use(bodyParser.json());

// Read cart data
const readCartDB = () => {
    try {
        const data = fs.readFileSync(CART_DB, "utf8");
        return JSON.parse(data);
    } catch (error) {
        console.error("Error reading cart database:", error);
        return {};
    }
};

// Write cart data
const writeCartDB = (data) => {
    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));
};

// Middleware: Verify Token
const verifyToken = (req, res, next) => {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "Unauthorized" });

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.userId = decoded.userId;
        next();
    } catch (error) {
        res.status(401).json({ message: "Invalid token" });
    }
};

// *1. Get User Cart*
app.get("/cart", verifyToken, (req, res) => {
    const db = readCartDB();
    const userCart = db[req.userId] || [];
    res.json({ cart: userCart });
});

// *2. Add to Cart*
app.post("/cart", verifyToken, (req, res) => {
    const { product } = req.body;
    if (!product) return res.status(400).json({ message: "Product is required" });

    let db = readCartDB();
    let userCart = db[req.userId] || [];

    // Prevent duplicate products
    if (!userCart.find(item => item.id === product.id)) {
        userCart.push(product);
        db[req.userId] = userCart;
        writeCartDB(db);
    }

    res.json({ message: "Product added to cart", cart: userCart });
});

// *3. Remove from Cart*
app.delete("/cart/:productId", verifyToken, (req, res) => {
    const { productId } = req.params;
    let db = readCartDB();
    let userCart = db[req.userId] || [];

    userCart = userCart.filter(item => item.id !== productId);
    db[req.userId] = userCart;
    writeCartDB(db);

    res.json({ message: "Product removed from cart", cart: userCart });
});

// *4. Merge Local Cart with Server Cart*
app.post("/cart/merge", verifyToken, (req, res) => {
    const { localCart } = req.body;
    let db = readCartDB();
    let userCart = db[req.userId] || [];

    // Merge local cart and server cart (remove duplicates)
    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];
    db[req.userId] = mergedCart;
    writeCartDB(db);

    res.json({ message: "Cart merged successfully", cart: mergedCart });
});

// *5. Clear Cart (Logout)*
app.delete("/cart", verifyToken, (req, res) => {
    let db = readCartDB();
    db[req.userId] = [];
    writeCartDB(db);
    res.json({ message: "Cart cleared" });
});

// *Start Server*
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
 });





 import { createSlice } from "@reduxjs/toolkit";

const cartSlice = createSlice({
    name: "cart",
    initialState: {
        items: [],
    },
    reducers: {
        setCart: (state, action) => {
            state.items = action.payload;
        },
        addToCart: (state, action) => {
            state.items.push(action.payload);
            localStorage.setItem("cart", JSON.stringify(state.items)); // Save to localStorage
        },
        removeFromCart: (state, action) => {
            state.items = state.items.filter(item => item.id !== action.payload);
            localStorage.setItem("cart", JSON.stringify(state.items));
        },
        clearCart: (state) => {
            state.items = [];
            localStorage.removeItem("cart");
        }
    }
});

export const { setCart, addToCart, removeFromCart, clearCart } = cartSlice.actions;
export default cartSlice.reducer;



