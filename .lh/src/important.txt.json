{
    "sourceFile": "src/important.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740489139477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740489160861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,5 +93,121 @@\n         });\n     } catch (error) {\n         console.error(\"Error clearing cart:\", error);\n     }\n-};\n\\ No newline at end of file\n+};\n+\n+\n+\n+\n+\n+\n+\n+const express = require(\"express\");\n+const jwt = require(\"jsonwebtoken\");\n+const cors = require(\"cors\");\n+const fs = require(\"fs\");\n+const bodyParser = require(\"body-parser\");\n+require(\"dotenv\").config();\n+\n+const app = express();\n+const PORT = 3001;\n+const CART_DB = \"./cart.json\";\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n+\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// Read cart data\n+const readCartDB = () => {\n+    try {\n+        const data = fs.readFileSync(CART_DB, \"utf8\");\n+        return JSON.parse(data);\n+    } catch (error) {\n+        console.error(\"Error reading cart database:\", error);\n+        return {};\n+    }\n+};\n+\n+// Write cart data\n+const writeCartDB = (data) => {\n+    fs.writeFileSync(CART_DB, JSON.stringify(data, null, 2));\n+};\n+\n+// Middleware: Verify Token\n+const verifyToken = (req, res, next) => {\n+    const token = req.headers.authorization?.split(\" \")[1];\n+    if (!token) return res.status(401).json({ message: \"Unauthorized\" });\n+\n+    try {\n+        const decoded = jwt.verify(token, JWT_SECRET);\n+        req.userId = decoded.userId;\n+        next();\n+    } catch (error) {\n+        res.status(401).json({ message: \"Invalid token\" });\n+    }\n+};\n+\n+// *1. Get User Cart*\n+app.get(\"/cart\", verifyToken, (req, res) => {\n+    const db = readCartDB();\n+    const userCart = db[req.userId] || [];\n+    res.json({ cart: userCart });\n+});\n+\n+// *2. Add to Cart*\n+app.post(\"/cart\", verifyToken, (req, res) => {\n+    const { product } = req.body;\n+    if (!product) return res.status(400).json({ message: \"Product is required\" });\n+\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Prevent duplicate products\n+    if (!userCart.find(item => item.id === product.id)) {\n+        userCart.push(product);\n+        db[req.userId] = userCart;\n+        writeCartDB(db);\n+    }\n+\n+    res.json({ message: \"Product added to cart\", cart: userCart });\n+});\n+\n+// *3. Remove from Cart*\n+app.delete(\"/cart/:productId\", verifyToken, (req, res) => {\n+    const { productId } = req.params;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    userCart = userCart.filter(item => item.id !== productId);\n+    db[req.userId] = userCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Product removed from cart\", cart: userCart });\n+});\n+\n+// *4. Merge Local Cart with Server Cart*\n+app.post(\"/cart/merge\", verifyToken, (req, res) => {\n+    const { localCart } = req.body;\n+    let db = readCartDB();\n+    let userCart = db[req.userId] || [];\n+\n+    // Merge local cart and server cart (remove duplicates)\n+    const mergedCart = [...new Map([...localCart, ...userCart].map(item => [item.id, item])).values()];\n+    db[req.userId] = mergedCart;\n+    writeCartDB(db);\n+\n+    res.json({ message: \"Cart merged successfully\", cart: mergedCart });\n+});\n+\n+// *5. Clear Cart (Logout)*\n+app.delete(\"/cart\", verifyToken, (req, res) => {\n+    let db = readCartDB();\n+    db[req.userId] = [];\n+    writeCartDB(db);\n+    res.json({ message: \"Cart cleared\" });\n+});\n+\n+// *Start Server*\n+app.listen(PORT, () => {\n+    console.log(`Server running on http://localhost:${PORT}`);\n+ });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740492169722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,5 +209,7 @@\n \n // *Start Server*\n app.listen(PORT, () => {\n     console.log(`Server running on http://localhost:${PORT}`);\n+\n+    \n  });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740492175799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,7 +209,38 @@\n \n // *Start Server*\n app.listen(PORT, () => {\n     console.log(`Server running on http://localhost:${PORT}`);\n+ });\n \n-    \n\\ No newline at end of file\n- });\n+\n+\n+\n+\n+ import { createSlice } from \"@reduxjs/toolkit\";\n+\n+const cartSlice = createSlice({\n+    name: \"cart\",\n+    initialState: {\n+        items: [],\n+    },\n+    reducers: {\n+        setCart: (state, action) => {\n+            state.items = action.payload;\n+        },\n+        addToCart: (state, action) => {\n+            state.items.push(action.payload);\n+            localStorage.setItem(\"cart\", JSON.stringify(state.items)); // Save to localStorage\n+        },\n+        removeFromCart: (state, action) => {\n+            state.items = state.items.filter(item => item.id !== action.payload);\n+            localStorage.setItem(\"cart\", JSON.stringify(state.items));\n+        },\n+        clearCart: (state) => {\n+            state.items = [];\n+            localStorage.removeItem(\"cart\");\n+        }\n+    }\n+});\n+\n+export const { setCart, addToCart, removeFromCart, clearCart } = cartSlice.actions;\n+export default cartSlice.reducer;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740489139477,
            "name": "Commit-0",
            "content": "import { setCart, addToCart, removeFromCart, clearCart } from \"./cartSlice\";\n\nconst API_URL = \"http://localhost:3001/cart\";\n\n// *Add to Cart Before Login (Saves in LocalStorage)*\nexport const addToCartBeforeLogin = (product) => (dispatch, getState) => {\n    dispatch(addToCart(product));\n    localStorage.setItem(\"cart\", JSON.stringify(getState().cart.items));\n};\n\n// *Load Cart After Login (Merge Local with Server)*\nexport const loadCartAfterLogin = () => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    let localCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n\n    try {\n        // Fetch user cart from the server\n        const response = await fetch(API_URL, {\n            method: \"GET\",\n            headers: { \"Authorization\": `Bearer ${token}` },\n        });\n\n        let userCart = response.ok ? await response.json() : { cart: [] };\n\n        // Merge Local Cart & Server Cart (Remove Duplicates)\n        const mergedCart = [...new Map([...localCart, ...userCart.cart].map(item => [item.id, item])).values()];\n\n        dispatch(setCart(mergedCart));\n\n        // Save merged cart to the server\n        await fetch(`${API_URL}/merge`, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({ localCart }),\n        });\n\n        // Clear local cart after merging\n        localStorage.removeItem(\"cart\");\n    } catch (error) {\n        console.error(\"Error fetching cart:\", error);\n    }\n};\n\n// *Add to Cart After Login*\nexport const addToCartAPI = (product) => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n\n    dispatch(addToCart(product));\n\n    try {\n        await fetch(API_URL, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({ product }),\n        });\n    } catch (error) {\n        console.error(\"Error adding product to cart:\", error);\n    }\n};\n\n// *Remove Item from Cart*\nexport const removeFromCartAPI = (productId) => async (dispatch, getState) => {\n    const token = localStorage.getItem(\"token\");\n\n    dispatch(removeFromCart(productId));\n\n    try {\n        await fetch(`${API_URL}/${productId}`, {\n            method: \"DELETE\",\n            headers: { \"Authorization\": `Bearer ${token}` },\n        });\n    } catch (error) {\n        console.error(\"Error removing product from cart:\", error);\n    }\n};\n\n// *Clear Cart (Logout)*\nexport const clearCartOnLogout = () => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n\n    dispatch(clearCart());\n\n    try {\n        await fetch(API_URL, {\n            method: \"DELETE\",\n            headers: { \"Authorization\": `Bearer ${token}` },\n        });\n    } catch (error) {\n        console.error(\"Error clearing cart:\", error);\n    }\n};"
        }
    ]
}